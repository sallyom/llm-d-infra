# yaml-language-server: $schema=values.schema.json

# Default values for the llm-d-infra chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# @schema
# additionalProperties: true
# @schema
# -- Parameters for bitnami.common dependency
common: {}


# -- Common parameters
# -- Override Kubernetes version
kubeVersion: ""

# -- String to partially override common.names.fullname
nameOverride: ""

# -- String to fully override common.names.fullname
fullnameOverride: ""

# -- Default Kubernetes cluster domain
clusterDomain: cluster.local

# @schema
# additionalProperties: true
# @schema
# -- Labels to add to all deployed objects
commonLabels: {}

# @schema
# additionalProperties: true
# @schema
# -- Annotations to add to all deployed objects
commonAnnotations: {}

# @schema
# items:
#   type: [string, object]
# @schema
# -- Array of extra objects to deploy with the release
extraDeploy: []


# -- Sample application deploying a p-d pair of specific model
# @default -- See below

# -- Gateway configuration
# @default -- See below
gateway:

  # -- Deploy resources related to Gateway
  enabled: true

  # --  String to fully override gateway.fullname
  fullnameOverride: ""

  # -- String to partially override gateway.fullname
  nameOverride: ""

  # -- Gateway class that determines the backend used
  # Currently supported values: "kgateway", "istio", or "gke-l7-regional-external-managed"
  gatewayClassName: kgateway

  # @schema
  # additionalProperties: true
  # @schema
  # -- Additional annotations provided to the Gateway resource
  annotations: {}

  # Special parameters applied to kGateway via GatewayParameters resource
  gatewayParameters:
    # @schema
    # type: [number, boolean]
    # @schema
    proxyUID: false

    enabled: true

    # @schema
    # default: info
    # enum: [error,warn,info,debug]
    # @schema
    logLevel: info

    # @schema
    # $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/_definitions.json#/definitions/io.k8s.api.core.v1.ResourceRequirements
    # @schema
    # -- Modify resource limits/requests available to the envoy gateway container pod
    # -- Resource requests/limits
    # <br /> Ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#resource-requests-and-limits-of-pod-and-container
    resources:
      limits:
        cpu: "2"
        memory: 1Gi
      requests:
        cpu: 100m
        memory: 128Mi

  # @schema
  # additionalProperties: true
  # @schema
  # Configuration for Istio DestinationRule to control traffic policy for this service.
  # -- see: https://istio.io/latest/docs/reference/config/networking/destination-rule/
  destinationRule:
    enabled: false
    host: "localhost"

    # @schema
    # additionalProperties: true
    # @schema
    # Optional: Apply a mesh-wide traffic policy
    trafficPolicy: {}

    # Optional: Define subsets for versioned routing (e.g., by labels)
    subsets: []

    # Optional: Control which namespaces can access this DestinationRule
    exportTo: []

    # @schema
    # additionalProperties: true
    # @schema
    # Optional: Apply only to specific workloads (via selector labels)
    workloadSelector: {}

  # @schema
  # items:
  #  type: object
  #  properties:
  #    name:
  #      description: Name is the name of the Listener. This name MUST be unique within a Gateway
  #      type: string
  #    path:
  #      description: Path to expose via Ingress
  #      type: string
  #    port:
  #      description: Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules
  #      type: integer
  #      minimum: 1
  #      maximum: 65535
  #    protocol:
  #      description: Protocol specifies the network protocol this listener expects to receive
  #      type: string
  # @schema
  # Set of listeners exposed via the Gateway, also propagated to the Ingress if enabled
  listeners:
    - name: default
      path: /
      port: 80
      protocol: HTTP

  # -- Gateway's service type. Ingress is only available if the service type is set to NodePort. Accepted values: ["LoadBalancer", "NodePort"]
  serviceType: NodePort

# -- Ingress configuration
# @default -- See below
ingress:

  # -- Deploy Ingress
  enabled: true

  # -- Name of the IngressClass cluster resource which defines which controller will implement the resource (e.g nginx)
  ingressClassName: ""

  # @schema
  # additionalProperties: true
  # @schema
  # -- Additional annotations for the Ingress resource
  annotations: {}

  # -- Hostname to be used to expose the NodePort service to the inferencing gateway
  host: ""

  # -- List of additional hostnames to be covered with this ingress record (e.g. a CNAME)
  # <!-- E.g.
  # extraHosts:
  #   - name: llm-d.env.example.com
  #     path: / (Optional)
  #     pathType: Prefix (Optional)
  #     port: 7007 (Optional) -->
  extraHosts: []

  # -- Path to be used to expose the full route to access the inferencing gateway
  path: "/"

  # -- Ingress TLS parameters
  tls:

    # -- Enable TLS configuration for the host defined at `ingress.host` parameter
    enabled: false

    # -- The name to which the TLS Secret will be called
    secretName: ""

  # @schema
  # items:
  #   $ref: https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master/master/_definitions.json#/definitions/io.k8s.api.networking.v1.IngressTLS
  # @schema
  # -- The TLS configuration for additional hostnames to be covered with this ingress record.
  # <br /> Ref: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  # <!-- E.g.
  # extraTls:
  #   - hosts:
  #     - llm-d.env.example.com
  #     secretName: llm-d-env -->
  extraTls: []

  # -- used as part of the host dirivation if not specified from OCP cluster domain (dont edit)
  clusterRouterBase: ""

auth:
  hf_token:
    enabled: true
    secretName: llm-d-hf-token
    secretKey: HF_TOKEN
